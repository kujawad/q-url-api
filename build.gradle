plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'org.liquibase.gradle' version '2.1.1'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
    id "com.palantir.docker" version "0.34.0"
    id 'org.springframework.experimental.aot' version '0.12.1'
}

group = 'com.q-url-api'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    inttestCompileOnly.extendsFrom testCompileOnly
    inttestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
    mavenCentral()
    maven { url = uri("https://repo.spring.io/release") }
}

testSets {
    integrationTest
}

sourceSets {
    testCommons {
        java {
            srcDir 'src/testCommons/java'
        }
        resources {
            srcDir 'src/testCommons/resources'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

liquibase {
    activities {
        doFirst {
            if (!project.hasProperty('runList')) {
                project.ext.runList = 'local'
            }
        }
        local {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
            url 'jdbc:postgresql://localhost:5432/q-url-api'
            username 'postgres'
            password 'postgres'
            driver 'org.postgresql.Driver'
            classpath "$rootDir"
        }
        prod {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
            url System.getenv('JDBC_DATABASE_URL')
            username System.getenv('JDBC_DATABASE_USERNAME')
            password System.getenv('JDBC_DATABASE_PASSWORD')
            driver 'org.postgresql.Driver'
            classpath "$rootDir"
        }
    }
    runList = project.ext.runList
}

bootBuildImage {
    builder = "paketobuildpacks/builder:tiny"
    environment = ["BP_NATIVE_IMAGE": "true"]
    imageName = "kujawad/q-url-api:latest"
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'
    implementation 'org.springdoc:springdoc-openapi-native:1.6.11'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'

    // Liquibase
    liquibaseRuntime 'org.liquibase:liquibase-core:4.16.0'
    liquibaseRuntime 'org.yaml:snakeyaml:1.32'
    liquibaseRuntime 'info.picocli:picocli:4.6.3'
    liquibaseRuntime 'org.postgresql:postgresql'

    // Apache
    implementation 'org.apache.commons:commons-lang3'

    // Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    integrationTestImplementation 'com.h2database:h2'

    testImplementation sourceSets.testCommons.output
    integrationTestImplementation sourceSets.testCommons.output
}

tasks.withType(Test) {
    useJUnitPlatform()
}

task unpack(type: Copy) {
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into 'build/docker/dependency'
}

docker {
    name = "kujawad/q-url-api"
    dockerfile = file('src/main/docker/Dockerfile')
    buildArgs(['DEPENDENCY': "dependency"])
}

task local {
    bootRun { systemProperty 'spring.profiles.active', 'local' }
}

bootRun.mustRunAfter local

unpack.dependsOn bootJar
docker.dependsOn unpack
check.dependsOn integrationTest
integrationTest.mustRunAfter test